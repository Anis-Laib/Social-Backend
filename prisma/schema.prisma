// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output = "../src/generated/client"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum GroupMembershipStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model User {
  id    String   @id @default(cuid())
  username String @unique
  email String @unique
  passwordHash String
  profilePicture String?
  firstname String
  lastname String
  bio String?
  phone String?
  dateOfBirth DateTime?
  groupsAdmined Group[] @relation("GroupAdmin")
  groups GroupMember[]
  posts Post[]
  followers Follow[] @relation("FollowFollower")
  following Follow[] @relation("FollowFollowing")
  likes Like[]
  chats Chat[]
  messages Message[]
  tokens Token[]
  createdAt DateTime @default(now())
}

model Token {
  id    String   @id @default(cuid())
  token String @unique
  type String
  user User @relation(fields: [userId], references: [id])
  userId String
  used Boolean @default(false)
  createdAt DateTime @default(now())
  expiresAt DateTime @default(now())
}

model Group {
  id    String   @id @default(cuid())
  name String
  description String?
  isPrivate Boolean @default(false)
  picture String?
  admin User @relation("GroupAdmin", fields: [adminId], references: [id])
  adminId String
  members GroupMember[]
  posts Post[]
}

model GroupMember {
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  status GroupMembershipStatus @default(PENDING)

  @@id([groupId, userId])
}

model Post {
  id    String   @id @default(cuid())
  content String
  image String?
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId String
  likes Like[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Follow {
  follower User @relation("FollowFollower", fields: [followerId], references: [id])
  followerId String
  following User @relation("FollowFollowing", fields: [followingId], references: [id])
  followingId String

  @@id([followerId, followingId])
}

model Like {
  post Post @relation(fields: [postId], references: [id])
  postId String
  user User @relation(fields: [userId], references: [id])
  userId String

  @@id([postId, userId])
}

model Chat {
  id    Int   @id @default(autoincrement())
  users User[]
  messages Message[]
}

model Message {
  id    Int   @id @default(autoincrement())
  content String
  chat Chat @relation(fields: [chatId], references: [id])
  chatId Int
  sender User @relation(fields: [senderId], references: [id])
  senderId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
